_target_: src.runners.runner.Runner

info:
  output_dir: "${paths.output_dir}/exp"
  data_dir: "${paths.data_dir}"
  run_name: null

optimizer:
  _target_: torch.optim.AdamW
  _partial_: true
  lr: 0.05
  betas: [0.9, 0.95]
  weight_decay: 0.001
  # _target_: torch.optim.Adam
  # _partial_: true
  # lr: 0.05

scheduler:
  _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  _partial_: true
  mode: min
  factor: 0.5
  patience: 10

model:
  _target_: src.models.lstm.Model
  cfg:
    # * info
    model_name: lstm
    printout: null
    seq_len: ${datamodule.cfg.seq_len}
    label_len: ${datamodule.cfg.label_len}
    pred_len: ${datamodule.cfg.pred_len}
    input_dim: ${datamodule.cfg.input_dim}
    features: ${datamodule.cfg.features}

    # * hyperparameters
    lstm_hidden_size: 100
    lstm_num_layers: 1
    bidirectional: False

    fc_hidden_size: 100

    dropout: 0.5
    maxpool_size: 2

metric_selection:
  train: ['rmse', 'mae', 'mape']
  test: ['rmse', 'mae', 'mape']

metrics:
  rmse:
    _target_: torchmetrics.regression.MeanSquaredError
    squared: False
  mae: 
    _target_: torchmetrics.regression.MeanSquaredError
  mape:
    _target_: torchmetrics.regression.MeanAbsolutePercentageError
  # mse:
  #   _target_: torchmetrics.regression.MeanSquaredError
  #   squared: True

criterion: 
  selection: mse
  mse:
    _target_: torch.nn.MSELoss
  mae:
    _target_: torch.nn.L1Loss


setup:
  monitor: val/mae
  mode: min
  patience: 5
